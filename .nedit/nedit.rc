! Preferences file for NEdit
! (User settings in X "application defaults" format)
!
! This file is overwritten by the "Save Defaults..." command in NEdit
! and serves only the interactively settable options presented in the NEdit
! "Preferences" menu.  To modify other options, such as key bindings, use
! the .Xdefaults file in your home directory (or the X resource
! specification method appropriate to your system).  The contents of this
! file can be moved into an X resource file, but since resources in this file
! override their corresponding X resources, either this file should be 
! deleted or individual resource lines in the file should be deleted for the
! moved lines to take effect.

nedit.fileVersion: 5.6
nedit.shellCommands: \
	Spell Check:::ID:\n\
		spell\n\
	Man Page:::ID:\n\
		ksh -c 'read NAME; man $NAME 2>&1 | manstrip'\n\
	Find In Files:::IW:\n\
		ksh -c 'read NAME; cd $(dirname %); grep $NAME *.c *.h 2>&1'\n\
	Check Out:Alt+O:O:DL:\n\
		cleartool co -nc %\n\
	Check In:Shift+Alt+I:I:DL:\n\
		/users/stuart/bin/cclin %\n\
	Uncheck Out:Shift+Alt+U:U:DL:\n\
		/users/stuart/bin/cclin -unco %\n\
	List Checkouts:Shift+Alt+L:L:D:\n\
		cleartool lsc -cview -s -all -me\n\
	Check In All:Shift+Alt+A:A:DL:\n\
		/users/stuart/bin/cclin -all\n\
	Version Tree:Alt+V:V:D:\n\
		xclearcase -vtree -tag `cleartool pwv -short` %\n\
	Difference:Alt+D:D:D:\n\
		cleartool diff -gra -pred -options -b % \n\
	XClearCase:Shift+Alt+X:X:D:\n\
		xclearcase\n
nedit.macroCommands: \
	Normal Fonts:::: {\n\
		set_fonts("-adobe-courier-medium-r-normal--14-*-*-*-*-*-*-*", \\\n\
		          "-adobe-courier-medium-o-normal--14-*-*-*-*-*-*-*", \\\n\
		          "-adobe-courier-bold-r-normal--14-*-*-*-*-*-*-*", \\\n\
		          "-adobe-courier-bold-o-normal--14-*-*-*-*-*-*-*")\n\
	}\n\
	Small Fonts:::: {\n\
		set_fonts("-adobe-courier-medium-r-normal--12-*-*-*-*-*-*-*", \\\n\
		          "-adobe-courier-medium-o-normal--12-*-*-*-*-*-*-*", \\\n\
		          "-adobe-courier-bold-r-normal--12-*-*-*-*-*-*-*", \\\n\
		          "-adobe-courier-bold-o-normal--12-*-*-*-*-*-*-*")\n\
	}\n\
	Complete Word:Escape::: {\n\
		# Tuning parameters\n\
		ScanDistance = 1000\n\
		\n\
		# Search back to a word boundary to find the word to complete\n\
		startScan = max(0, $cursor - ScanDistance)\n\
		endScan = min($text_length, $cursor + ScanDistance)\n\
		scanString = get_range(startScan, endScan)\n\
		keyEnd = $cursor-startScan\n\
		keyStart = search_string(scanString, "<", keyEnd, "backward", "regex")\n\
		if (keyStart == -1)\n\
		    return\n\
		keyString = "<" substring(scanString, keyStart, keyEnd)\n\
		\n\
		# search both forward and backward from the cursor position.  Note that\n\
		# using a regex search can lead to incorrect results if any of the special\n\
		# regex characters is encountered, which is not considered a delimiter\n\
		backwardSearchResult = search_string(scanString, keyString, keyStart-1, \\\n\
		    	"backward", "regex")\n\
		forwardSearchResult = search_string(scanString, keyString, keyEnd, "regex")\n\
		if (backwardSearchResult == -1 && forwardSearchResult == -1) {\n\
		    beep()\n\
		    return\n\
		}\n\
		\n\
		# if only one direction matched, use that, otherwise use the nearest\n\
		if (backwardSearchResult == -1)\n\
		    matchStart = forwardSearchResult\n\
		else if (forwardSearchResult == -1)\n\
		    matchStart = backwardSearchResult\n\
		else {\n\
		    if (keyStart - backwardSearchResult <= forwardSearchResult - keyEnd)\n\
		    	matchStart = backwardSearchResult\n\
		    else\n\
		    	matchStart = forwardSearchResult\n\
		}\n\
		\n\
		# find the complete word\n\
		matchEnd = search_string(scanString, ">", matchStart, "regex")\n\
		completedWord = substring(scanString, matchStart, matchEnd)\n\
		\n\
		# replace it in the window\n\
		replace_range(startScan + keyStart, $cursor, completedWord)\n\
	}\n\
	Fill Sel. w/Char:::R: {\n\
		if ($selection_start == -1) {\n\
		    beep()\n\
		    return\n\
		}\n\
		\n\
		# Ask the user what character to fill with\n\
		fillChar = string_dialog("Fill selection with what character?", "OK", "Cancel")\n\
		if ($string_dialog_button == 2)\n\
		    return\n\
		\n\
		# Count the number of lines in the selection\n\
		nLines = 0\n\
		for (i=$selection_start; i<$selection_end; i++)\n\
		    if (get_character(i) == "\\n")\n\
		    	nLines++\n\
		\n\
		# Create the fill text\n\
		rectangular = $selection_left != -1\n\
		line = ""\n\
		fillText = ""\n\
		if (rectangular) {\n\
		    for (i=0; i<$selection_right-$selection_left; i++)\n\
			line = line fillChar\n\
		    for (i=0; i<nLines; i++)\n\
			fillText = fillText line "\\n"\n\
		    fillText = fillText line\n\
		} else {\n\
		    if (nLines == 0) {\n\
		    	for (i=$selection_start; i<$selection_end; i++)\n\
		    	    fillText = fillText fillChar\n\
		    } else {\n\
		    	startIndent = 0\n\
		    	for (i=$selection_start-1; i>=0 && get_character(i)!="\\n"; i--)\n\
		    	    startIndent++\n\
		    	for (i=0; i<$wrap_margin-startIndent; i++)\n\
		    	    fillText = fillText fillChar\n\
		    	fillText = fillText "\\n"\n\
			for (i=0; i<$wrap_margin; i++)\n\
			    line = line fillChar\n\
			for (i=0; i<nLines-1; i++)\n\
			    fillText = fillText line "\\n"\n\
			for (i=$selection_end-1; i>=$selection_start && get_character(i)!="\\n"; \\\n\
			    	i--)\n\
			    fillText = fillText fillChar\n\
		    }\n\
		}\n\
		\n\
		# Replace the selection with the fill text\n\
		replace_selection(fillText)\n\
	}\n\
	C Comments>Comment Out Sel.@C@C++:F12::R: {\n\
		selStart = $selection_start\n\
		selEnd = $selection_end\n\
		replace_range(selStart, selEnd, "/* " get_selection() " */")\n\
		select(selStart, selEnd + 6)\n\
	}\n\
	C Comments>C Uncomment Sel.@C@C++:Shift+F12::R: {\n\
		sel = get_selection()\n\
		selStart = $selection_start\n\
		selEnd = $selection_end\n\
		commentStart = search_string(sel, "/*", 0)\n\
		if (substring(sel, commentStart+2, commentStart+3) == " ")\n\
		    keepStart = commentStart + 3\n\
		else\n\
		    keepStart = commentStart + 2\n\
		keepEnd = search_string(sel, "*/", length(sel), "backward")\n\
		commentEnd = keepEnd + 2\n\
		if (substring(sel, keepEnd - 1, keepEnd) == " ")\n\
		    keepEnd = keepEnd - 1\n\
		replace_range(selStart + commentStart, selStart + commentEnd, \\\n\
			substring(sel, keepStart, keepEnd))\n\
		select(selStart, selEnd - (keepStart-commentStart) - \\\n\
			(commentEnd - keepEnd))\n\
	}\n\
	C Comments>+ C++ Comment@C++:::R: {\n\
		replace_in_selection("^.*$", "// &", "regex")\n\
	}\n\
	C Comments>- C++ Comment@C++:::R: {\n\
		replace_in_selection("(^[ \\\\t]*// ?)(.*)$", "\\\\2", "regex")\n\
	}\n\
	C Comments>+ C Bar Comment 1@C:::R: {\n\
		if ($selection_left != -1) {\n\
		    dialog("Selection must not be rectangular")\n\
		    return\n\
		}\n\
		start = $selection_start\n\
		end = $selection_end-1\n\
		origText = get_range($selection_start, $selection_end-1)\n\
		newText = "/*\\n" replace_in_string(get_range(start, end), \\\n\
			"^", " * ", "regex") "\\n */\\n"\n\
		replace_selection(newText)\n\
		select(start, start + length(newText))\n\
	}\n\
	C Comments>- C Bar Comment 1@C:::R: {\n\
		selStart = $selection_start\n\
		selEnd = $selection_end\n\
		newText = get_range(selStart+3, selEnd-4)\n\
		newText = replace_in_string(newText, "^ \\\\* ", "", "regex")\n\
		replace_range(selStart, selEnd, newText)\n\
		select(selStart, selStart + length(newText))\n\
	}\n\
	Make C Prototypes@C@C++:::: {\n\
		# simplistic extraction of C function prototypes, usually good enough\n\
		if ($selection_start == -1) {\n\
		    start = 0\n\
		    end = $text_length\n\
		} else {\n\
		    start = $selection_start\n\
		    end = $selection_end\n\
		}\n\
		string = get_range(start, end)\n\
		# remove all C++ and C comments, then all blank lines in the extracted range\n\
		string = replace_in_string(string, "//.*$", "", "regex", "copy")\n\
		string = replace_in_string(string, "(?n/\\\\*.*?\\\\*/)", "", "regex", "copy")\n\
		string = replace_in_string(string, "^\\\\s*\\n", "", "regex", "copy")\n\
		nDefs = 0\n\
		searchPos = 0\n\
		prototypes = ""\n\
		staticPrototypes = ""\n\
		for (;;) {\n\
		    headerStart = search_string(string, \\\n\
			    "^[a-zA-Z]([^;#\\"'{}=><!/]|\\n)*\\\\)[ \\t]*\\n?[ \\t]*{", \\\n\
			    searchPos, "regex")\n\
		    if (headerStart == -1)\n\
			break\n\
		    headerEnd = search_string(string, ")", $search_end,"backward") + 1\n\
		    prototype = substring(string, headerStart, headerEnd) ";\\n"\n\
		    if (substring(string, headerStart, headerStart+6) == "static")\n\
			staticPrototypes = staticPrototypes prototype\n\
		    else\n\
		    			prototypes = prototypes prototype\n\
		    searchPos = headerEnd\n\
		    nDefs++\n\
		}\n\
		if (nDefs == 0) {\n\
		    dialog("No function declarations found")\n\
		    return\n\
		}\n\
		new()\n\
		focus_window("last")\n\
		replace_range(0, 0, prototypes staticPrototypes)\n\
	}\n\
	New C Source File:F1::: {\n\
		$module = string_dialog( "Enter name of C source file", "OK", "Cancel" )\n\
		\n\
		if ( $string_dialog_button == 1 )\n\
		{\n\
		   # Get template\n\
		   $block = read_file("/users/mathew/TEMPLATES/source_file.c")\n\
		\n\
		   # Open new window\n\
		   new()\n\
		   focus_window("last")\n\
		\n\
		   # Insert template and insert module name\n\
		   insert_string($block)\n\
		   replace_all("####", $module)\n\
		}\n\
	}\n\
	New C Header File:F2::: {\n\
		$module = string_dialog( "Enter name of C header file", "OK", "Cancel" )\n\
		$uc_module = toupper($module)\n\
		\n\
		if ( $string_dialog_button == 1 )\n\
		{\n\
		   # Get template\n\
		   $block = read_file("/users/mathew/TEMPLATES/header_file.h")\n\
		\n\
		   # Open new window\n\
		   new()\n\
		   focus_window("last")\n\
		\n\
		   # Insert template and insert module name\n\
		   insert_string($block)\n\
		   replace_all("####", $module)\n\
		   replace_all("@@@@", $uc_module )\n\
		}\n\
	}\n\
	Insert Exported Function:F3::: {\n\
		$function = string_dialog( "Enter name of exported function", "OK", "Cancel" )\n\
		\n\
		if ( $string_dialog_button == 1 )\n\
		{\n\
		   $block = read_file("/users/mathew/TEMPLATES/exported_function.txt")   \n\
		   insert_string($block)\n\
		   replace_all("####", $function)\n\
		}\n\
	}\n\
	Insert Static Function:F4::: {\n\
		$function = string_dialog( "Enter name of static function", "OK", "Cancel" )\n\
		\n\
		if ( $string_dialog_button == 1 )\n\
		{\n\
		   $block = read_file("/users/mathew/TEMPLATES/static_function.txt")   \n\
		   insert_string($block)\n\
		   replace_all("####", $function)\n\
		}\n\
	}\n\
	New KShell Script:F5::: {\n\
		$script = string_dialog( "Enter name of KShell Script", "OK", "Cancel" )\n\
		\n\
		if ( $string_dialog_button == 1 )\n\
		{\n\
		   # Get template from file\n\
		   $block = read_file("/users/mathew/TEMPLATES/script.ksh")\n\
		\n\
		   # Create new file\n\
		   new()\n\
		   focus_window("last")\n\
		\n\
		   # Insert template and change name of script \n\
		   insert_string($block)\n\
		   replace_all("####", $script)\n\
		}\n\
	}\n\
	Next Function:Ctrl+Bracketright::: {\n\
		new_pos = search("^\\\\{", $cursor+1, "regex", "wrap", "forward")\n\
		\n\
		if (new_pos != -1)\n\
		{\n\
		  top_margin = $n_display_lines/3\n\
		  bot_margin = $n_display_lines - $n_display_lines/3\n\
		  set_cursor_pos(new_pos)\n\
		  if ($line < ($top_line + top_margin))\n\
		  {\n\
		    scroll_to_line($line - top_margin)\n\
		  }\n\
		  if ($line > ($top_line + bot_margin))\n\
		  {\n\
		    scroll_to_line($line - bot_margin)\n\
		  }\n\
		  select(new_pos, $search_end)\n\
		}\n\
		\n\
	}\n\
	Prev Function:Ctrl+Bracketleft::: {\n\
		new_pos = search("^\\\\{", $cursor-1, "regex", "wrap", "backward")\n\
		\n\
		if (new_pos != -1)\n\
		{\n\
		  top_margin = $n_display_lines/3\n\
		  bot_margin = $n_display_lines - $n_display_lines/3\n\
		  set_cursor_pos(new_pos)\n\
		  if ($line < ($top_line + top_margin))\n\
		  {\n\
		    scroll_to_line($line - top_margin)\n\
		  }\n\
		  if ($line > ($top_line + bot_margin))\n\
		  {\n\
		    scroll_to_line($line - bot_margin)\n\
		  }\n\
		  select(new_pos, $search_end)\n\
		}\n\
		\n\
	}\n\
	Reverse comparison:Ctrl+Equal::R: {\n\
		what_to_swap = get_selection()\n\
		\n\
		op_start = search_string(what_to_swap, "[ ]*[!=<>&|]=[ ]*", 0, "regex", "forward")\n\
		op_end   = $search_end\n\
		\n\
		if (op_start != -1)\n\
		{\n\
		  op = substring(what_to_swap,op_start, op_end)\n\
		  op_pos = search_string(op, "[<>]", 0, "regex", "forward")\n\
		  if (op_pos != -1)\n\
		  {\n\
		    if (substring(op,op_pos,op_pos+1) == ">") \n\
		    {\n\
		      op = " <= "\n\
		    }\n\
		    else if (substring(op,op_pos,op_pos+1) == "<")\n\
		    {\n\
		      op = " >= "\n\
		    }\n\
		  }\n\
		  if (substring(op,0,1) != " ") op = " " op\n\
		  if (substring(op,length(op)-1,length(op)) != " ") op = op " "\n\
		  left_thing = substring(what_to_swap,0,op_start)\n\
		  right_thing = substring(what_to_swap,op_end,length(what_to_swap))\n\
		\n\
		  swapped_thing = right_thing op left_thing\n\
		\n\
		  replace_selection( swapped_thing )\n\
		}\n\
		else\n\
		{\n\
		  op_start = search_string(what_to_swap, "[ ]*[<>][ ]*", 0, "regex", "forward")\n\
		  op_end   = $search_end\n\
		\n\
		  if (op_start != -1)\n\
		  {\n\
		    op = substring(what_to_swap,op_start, op_end)\n\
		    op_pos = search_string(op, "[<>]", 0, "regex", "forward")\n\
		    if (op_pos != -1)\n\
		    {\n\
		      if (substring(op,op_pos,op_pos+1) == ">") \n\
		      {\n\
		        op = " < "\n\
		      }\n\
		      else if (substring(op,op_pos,op_pos+1) == "<")\n\
		      {\n\
		        op = " > "\n\
		      }\n\
		    }\n\
		    if (substring(op,0,1) != " ") op = " " op\n\
		    if (substring(op,length(op)-1,length(op)) != " ") op = op " "\n\
		    left_thing = substring(what_to_swap,0,op_start)\n\
		    right_thing = substring(what_to_swap,op_end,length(what_to_swap))\n\
		\n\
		    swapped_thing = right_thing op left_thing\n\
		\n\
		    replace_selection( swapped_thing )\n\
		  }\n\
		}\n\
		\n\
	}\n
nedit.bgMenuCommands: \
	Undo:::: {\n\
		undo()\n\
	}\n\
	Redo:::: {\n\
		redo()\n\
	}\n\
	Cut:::R: {\n\
		cut_clipboard()\n\
	}\n\
	Copy:::R: {\n\
		copy_clipboard()\n\
	}\n\
	Paste:::: {\n\
		paste_clipboard()\n\
	}\n\
	Find Definition@C@C++@UIMX:::R: {\n\
		find_definition()\n\
	}\n
nedit.highlightPatterns: C:1:0{\n\
		comment:"/\\*":"\\*/"::Comment::\n\
		C++ comment:"//":"$"::Comment::\n\
		string:"""":"""":"\\n":String::\n\
		preprocessor line:"^[ \\t]*#":"$"::Preprocessor::\n\
		string escape chars:"\\\\(.|\\n)":::String1:string:\n\
		preprocessor esc chars:"\\\\(.|\\n)":::Preprocessor1:preprocessor line:\n\
		preprocessor comment:"/\\*":"\\*/"::Comment:preprocessor line:\n\
		character constant:"'":"'":"[^\\\\][^']":Character Const::\n\
		numeric constant:"<((0(x|X)[\\da-fA-F]*)|((\\d+\\.?\\d*)|(\\.\\d+))((e|E)(\\+|-)?\\d+)?)(L|l|UL|ul|u|U|F|f)?>|<(TRUE|FALSE|True|False|NULL)>":::Numeric Const::D\n\
		storage keyword:"<(const|extern|auto|register|static|unsigned|signed|volatile|char|double|float|int|long|short|void|typedef|struct|union|enum|boolean|lat_long|date_time|point|FILE)>":::Storage Type::D\n\
		keyword:"<(return|goto|if|else|case|default|switch|break|continue|while|do|for|sizeof)>":::Keyword::D\n\
		braces:"[{}]":::Keyword::D\n\
		ViewLibFunction:"ViewL[aA-zZ]*":::Keyword::\n\
		ViewLibType:"[ ]+View[aA-zZ]*":::Storage Type::\n\
	}\n\
	C++:1:0{\n\
		comment:"/\\*":"\\*/"::Comment::\n\
		C++ comment:"//":"$"::Comment::\n\
		string:"""":"""":"\\n":String::\n\
		preprocessor line:"^[ \\t]*#":"$"::Preprocessor::\n\
		string escape chars:"\\\\(.|\\n)":::String1:string:\n\
		preprocessor esc chars:"\\\\(.|\\n)":::Preprocessor1:preprocessor line:\n\
		preprocessor comment:"/\\*":"\\*/"::Comment:preprocessor line:\n\
		character constant:"'":"'":"[^\\\\][^']":Character Const::\n\
		numeric constant:"<((0(x|X)[\\da-fA-F]*)|((\\d+\\.?\\d*)|(\\.\\d+))((e|E)(\\+|-)?\\d+)?)(L|l|UL|ul|u|U|F|f)?>|<(TRUE|FALSE|True|False|NULL)>":::Numeric Const::D\n\
		storage keyword:"<(class|typename|typeid|template|friend|virtual|inline|explicit|operator|overload|public|private|protected|const|extern|auto|register|static|mutable|unsigned|signed|volatile|char|double|float|int|long|short|bool|wchar_t|void|typedef|struct|union|enum)>":::Storage Type::D\n\
		keyword:"<(new|delete|this|return|goto|if|else|case|default|switch|break|continue|while|do|for|catch|throw|sizeof|true|false|namespace|using|dynamic_cast|static_cast|reinterpret_cast)>":::Keyword::D\n\
		braces:"[{}]":::Keyword::D\n\
		ViewLibFunction:"ViewL[aA-zZ]*":::Keyword::\n\
		ViewLibType:"[ ]+View[aA-zZ]*":::Storage Type::\n\
	}\n\
	UIMX:1:0{\n\
		UIMX resource:"^\\*":":"::Subroutine::\n\
		UIMX blank line:"^[ \\t]*\\n":"\\\\$":"^[*]":Ada Attributes::\n\
		UIMX line:"^.*[^\\\\]$":::Ada Attributes::\n\
		comment:"/\\*":"\\*/":"[^\\\\]\\n":Comment::\n\
		string:"""":"""":"\\n":String::\n\
		preprocessor line:"^[ \\t]*#":"$"::Preprocessor::\n\
		preprocessor comment:"/\\*":"\\*/":"[^\\\\]\\n":Comment:preprocessor line:\n\
		character constant:"'":"'":"[^\\\\][^']":Character Const::\n\
		numeric constant:"<((0(x|X)[\\da-fA-F]*)|((\\d+\\.?\\d*)|(\\.\\d+))((e|E)(\\+|-)?\\d+)?)(L|l|UL|ul|u|U|F|f)?>|<(TRUE|FALSE|True|False|NULL)>":::Numeric Const::D\n\
		storage keyword:"<(const|extern|auto|register|static|unsigned|signed|volatile|char|double|float|int|long|short|void|typedef|struct|union|enum|boolean|lat_long|date_time|point|FILE)>":::Storage Type::D\n\
		keyword:"<(return|goto|if|else|case|default|switch|break|continue|while|do|for|sizeof)>":::Keyword::D\n\
		braces:"[{}]":::Keyword::D\n\
	}\n\
	Java:Default\n\
	JavaScript:Default\n\
	Ada:Default\n\
	Fortran:Default\n\
	Pascal:Default\n\
	Yacc:Default\n\
	Perl:Default\n\
	Python:Default\n\
	Awk:Default\n\
	Tcl:Default\n\
	Sh Ksh Bash:Default\n\
	Csh:Default\n\
	Makefile:Default\n\
	SGML HTML:Default\n\
	LaTeX:Default\n\
	PostScript:Default\n\
	Lex:Default\n\
	SQL:Default\n\
	Matlab:Default\n\
	VHDL:Default\n\
	Verilog:Default\n\
	X Resources:Default\n\
	NEdit Macro:Default\n\
	ODM Structure:1:0{\n\
		comment:"#.*$":::Comment::\n\
		keyword:"<(TYPE|FILE|SET|CURVE_SET|TABLE_SET|LOOKUP|AGGREGATE|INTERSECT|CONSTANT|ITEMS|SCALE|FILES|UNITS)>":::Keyword::\n\
		set:"<(CRUISE_SPEEDS|CRUISE_MASSES|CRUISE_TAS|CRUISE_KCAS|CRUISE_SPEED|CRUISE_ENDURANCE|CRUISE_RANGE|CRUISE_RECOMMENDED|CLIMB|DESCENT|CEILING|ACCELERATION|CRUISE_MACH|FLL|BRAKE_INC|LAND_AIRBORNE|TOFF_MAT|LAND_MAT|REF_GRADIENT|FAR_ACCEL|CLIMB_SCHEDULED|CLIMB_210|CLIMB_180|HOLDING_ALT|CLEARWAY|TODA_DX_TODA|TODA_DX_ASDA|TODA_DX|TORA_DX_TORA|TORA_DX_ASDA|TORA_DX|TODA_D|TORA_D|DMREF|DREF|DFT_SPEED|MIN_VAT|LAND_BRAKE_MASS|LAND_HSGI_MASS|VHSGI|V2_VRMIN)>":::Subroutine1::\n\
		numeric:"<((0(x|X)[\\da-fA-F]*)|((\\d+\\.?\\d*)|(\\.\\d+))((e|E)(\\+|-)?\\d+)?)(L|l|UL|ul|u|U|F|f)?>|<(LOCKHEED|BAE|CARPET|CARP2|CARP2_SELECT|CORRECTION|XY|CHART|HUNTING|SINGLE|CHAIN|TYPE1|TYPE2|TYPE3|EDS|ON|OFF|NOS|ROS|MOS|FERRY|NO_ATCS|NO_FLAPS|MAX|MIN|SUM|DIF|PRD|DIV|WET|DRY|IFF|VNO1|VNO2|VNO3|VNE|NORMAL|ALL|MINUTE|MAX_DRY|REHEAT|RANGE|RAPID|KG|NM|FT|HR|100KG|STABILISE|SERVICE|STANDARD|HIGH_SPEED|DIVE|ATC)>":::Numeric Const::\n\
		variable:"<(NULL|DIST|AIRBORNE|ALTITUDE|FUEL|FUEL_FLOW|POWER|ENGINES|FUEL_RANGE|MASS|TIME|AIR_SPEED|DESCENT_TYPE|RSC|RCR|REVERSE|VMCL|VTL|VSTOP|FAR_DIST|SPEED|DRAG_IND|ISA|OAT|BLEED|VNO|VMCG|VMCA|WING_SWEEP|MACH_NO|CLIMB_TYPE|ACC_CUE|LDR|LGRR|TORR|TODR|ASDA|TORA|TODA|TOFF_MASS|TEMP|FLAPS|VR|V2|V1|RBE|VGROUND|VUNSTICK|VCHECK|HEAD_WIND|SLOPE|CHECK_DIST|ANTI_SKID|CONFIG|VAT|VTOUCHDOWN|CHUTE|VBE|FAR_GRADIENT|LAND_MASS|CROSS_WIND|VRA|VMCL2|CLR_SPEED|VREFUSAL|FUSS|VMCA2|OBS_GRADIENT|OBS_DIST|NET_HGT|NET_DIST|GROSS_HGT|CEILING_TYPE|X_RESULT|D_RESULT|MAX_SPEED|FUEL_MASS|ZERO_MASS)>":::Identifier::\n\
	}\n\
	CSS:Default\n\
	Regex:Default\n\
	XML:Default
nedit.languageModes: 	C:.c .h .sc .g::::::".,/\\`'!|@#%^&*()-=+{}[]"":;<>?~":\n\
	C++:.cc .hh .C .H .cpp .cxx::::::".,/\\`'!|@#%^&*()-=+{}[]"":;<>?~":\n\
	Java:.java:::::::\n\
	JavaScript:.js:::::::\n\
	Ada:.ada .ad .ads .adb .a:::::::\n\
	Fortran:.f .f77 .for .F:::::::\n\
	Pascal:.pas .p .int:::::::\n\
	Yacc:.y::::::".,/\\`'!|@#%^&*()-=+{}[]"":;<>?~":\n\
	Perl:.pl .pm .p5 .PL:"^[ \\t]*#[ \\t]*!.*perl":Auto:None:::".,/\\\\`'!$@#%^&*()-=+{}[]"":;<>?~|":\n\
	UIMX:.i .ii:"/! UIMX ascii/":::::".,/\\`'!|@#%^&*()-=+{}[]"":;<>?~":\n\
	Python:.py:"^#!.*python":Auto:None:4:4:"!""#$%&'()*+,-./:;<=>?@[\\\\]^`{|}~":\n\
	Tcl:.tcl .tk .itcl .itk::Smart:None::::\n\
	Awk:.awk:::::::\n\
	Sh Ksh Bash:.sh .bash .ksh .profile .bashrc .bash_logout .bash_login .bash_profile:"^[ \\t]*#[ \\t]*![ \\t]*/.*bin/(sh|ksh|bash)"::::::\n\
	Csh:.csh .cshrc .tcshrc .login .logout:"^[ \\t]*#[ \\t]*![ \\t]*/bin/t?csh"::::::\n\
	Makefile:Makefile makefile .mk:::::::\n\
	SGML HTML:.sgml .sgm .html .htm:"\\<(?ihtml)\\>"::::::\n\
	LaTeX:.tex .sty .cls .dtx .ins:::::::\n\
	PostScript:.ps .PS .eps .EPS .epsf .epsi:::::::\n\
	Lex:.lex:::::::\n\
	SQL:.sql:::::::\n\
	Matlab:..m .oct .sci:::::::\n\
	VHDL:.vhd .vhdl .vdl:::::::\n\
	Verilog:.v:::::::\n\
	X Resources:.Xresources .Xdefaults .nedit nedit.rc:"^[!#].*([Aa]pp|[Xx]).*[Dd]efaults"::::::\n\
	NEdit Macro:.nm .neditmacro:::::::\n\
	ODM Structure:.str:"# ODM Structure Definition File":None:None::::\n\
	CSS:css::Auto:None:::".,/\\`'!|@#%^&*()=+{}[]"":;<>?~":\n\
	Regex:.reg .regex:"\\(\\?[:#=!iInN].+\\)":None:Continuous::::\n\
	XML:.xml .xsl .dtd:"\\<(?i\\?xml|!doctype)"::None:::"<>/=""'()+*?|":
nedit.styles: 	Plain:white:Plain\n\
	Comment:sienna1:Italic\n\
	Keyword:sky blue:Plain\n\
	Operator:dark blue:Bold\n\
	Bracket:dark blue:Bold\n\
	Storage Type:sky blue:Plain\n\
	Storage Type1:beige:Bold\n\
	String:pale green:Plain\n\
	String1:orange:Bold\n\
	String2:yellow:Bold\n\
	Preprocessor:light slate blue:Bold\n\
	Preprocessor1:light slate blue:Plain\n\
	Character Const:lawn green:Plain\n\
	Numeric Const:tomato1:Plain\n\
	Identifier:beige:Plain\n\
	Identifier1:deep sky blue:Plain\n\
	Subroutine:beige:Plain\n\
	Subroutine1:tan:Plain\n\
	Ada Attributes:plum:Bold\n\
	Label:tomato:Italic\n\
	Flag:tomato:Plain\n\
	Text Comment:light blue:Italic\n\
	Text Key:pale violet red:Bold\n\
	Text Key1:violet red:Plain\n\
	Text Arg:deep sky blue:Bold\n\
	Text Arg1:light steel blue:Bold\n\
	Text Arg2:deep sky blue:Plain\n\
	Text Escape:gray30:Bold\n\
	LaTeX Math:green:Plain\n\
	Pointer:#660000:Bold\n\
	Regex:#009944:Bold\n\
	Warning:brown1:Italic
nedit.smartIndentInit: 	C:Default\n\
	C++:Default\n\
	Python:Default\n\
	Matlab:Default
nedit.smartIndentInitCommon: Default
nedit.autoWrap: None
nedit.wrapMargin: 0
nedit.autoIndent: Smart
nedit.autoSave: False
nedit.openInTab: True
nedit.saveOldVersion: False
nedit.showMatching: Off
nedit.matchSyntaxBased: True
nedit.highlightSyntax: True
nedit.backlightChars: False
nedit.searchDialogs: False
nedit.beepOnSearchWrap: False
nedit.retainSearchDialogs: True
nedit.searchWraps: True
nedit.stickyCaseSenseButton: True
nedit.repositionDialogs: False
nedit.autoScroll: True
nedit.appendLF: True
nedit.sortOpenPrevMenu: True
nedit.statisticsLine: True
nedit.iSearchLine: True
nedit.sortTabs: True
nedit.tabBar: True
nedit.tabBarHideOne: True
nedit.toolTips: True
nedit.globalTabNavigate: False
nedit.lineNumbers: True
nedit.pathInWindowsMenu: True
nedit.warnFileMods: True
nedit.warnRealFileMods: True
nedit.warnExit: True
nedit.searchMethod: Literal
nedit.textRows: 60
nedit.textCols: 100
nedit.tabDistance: 8
nedit.emulateTabs: 2
nedit.insertTabs: False
nedit.textFont: -adobe-courier-medium-r-normal--14-100-100-100-m-90-iso8859-1
nedit.boldHighlightFont: -adobe-courier-bold-r-normal--14-100-100-100-m-90-iso8859-1
nedit.italicHighlightFont: -adobe-courier-medium-o-normal--14-100-100-100-m-90-iso8859-1
nedit.boldItalicHighlightFont: -adobe-courier-bold-o-normal--14-100-100-100-m-90-iso8859-1
nedit.textFgColor: white
!nedit.textBgColor: #333333
nedit.textBgColor: #282a36
nedit.selectFgColor: black
nedit.selectBgColor: #cccccc
nedit.hiliteFgColor: white
nedit.hiliteBgColor: red
nedit.lineNoFgColor: grey65
nedit.cursorFgColor: light sky blue
nedit.shell: /usr/bin/ksh
nedit.smartTags: True
nedit.prefFileRead: True
nedit.titleFormat: {%c} [%s] %f (%S) - %d
